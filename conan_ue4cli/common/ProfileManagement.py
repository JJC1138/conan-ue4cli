import conans, os, re, shutil
from os.path import exists, join
from .Utility import Utility

class ProfileManagement(object):
	'''
	Provides functionality for managing Conan profiles
	'''
	
	# Methods that apply to all Conan profiles, including those not generated by conan-ue4cli
	
	@staticmethod
	def conanProfileDir():
		'''
		Returns the path to the Conan profiles directory
		'''
		return join(conans.paths.get_conan_user_home(), '.conan', 'profiles')
	
	@staticmethod
	def conanProfileFile(profile):
		'''
		Resolves the path to the file for the specified Conan profile
		'''
		return join(ProfileManagement.conanProfileDir(), profile)
	
	@staticmethod
	def duplicateProfile(source, dest):
		'''
		Duplicates an existing Conan profile
		'''
		
		# Remove the destination profile if it already exists
		sourceProfile = ProfileManagement.conanProfileFile(source)
		destProfile = ProfileManagement.conanProfileFile(dest)
		if exists(destProfile):
			os.unlink(destProfile)
		
		# Perform the copy
		print('Copying the "{}" Conan profile into a new profile named "{}"...'.format(source, dest))
		shutil.copy2(sourceProfile, destProfile)
	
	@staticmethod
	def removeProfile(profile):
		'''
		Removes the specified Conan profile if it exists
		'''
		profileFile = ProfileManagement.conanProfileFile(profile)
		if exists(profileFile):
			os.unlink(profileFile)
	
	
	# Methods that apply only to Conan profiles generated by conan-ue4cli
	
	@staticmethod
	def defaultProfile():
		'''
		Returns the name of the default profile that gets generated for the host platform during profile generation
		'''
		return 'ue4'
	
	@staticmethod
	def listGeneratedProfiles():
		'''
		Returns a list of the Conan profiles that conan-ue4cli has already generated
		'''
		
		# Retrieve the full list of Conan profiles
		output = Utility.capture(['conan', 'profile', 'list'])
		profiles = output.stdout.decode('utf-8').replace('\r\n', '\n').split('\n')
		
		# Filter the list to identify the profiles generated by conan-ue4cli
		filterRegex = re.compile('ue[0-9]+\\.[0-9]+-.+')
		return list([
			profile for profile in profiles
			if profile == 'ue4' or filterRegex.match(profile) is not None
		])
	
	@staticmethod
	def profileEngineVersion(profile):
		'''
		Retrieves the Unreal Engine version string for the specified Conan profile
		'''
		return Utility.capture(['conan', 'profile', 'get', 'env.UNREAL_ENGINE_VERSION', profile]).stdout.decode('utf-8').strip()
